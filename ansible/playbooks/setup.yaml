- name: setup dependencies
  hosts: localhost
  become: true
  gather_facts: false
  tasks:
    - name: install dependencies
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - htop
        - nload
        - bat
        - unzip
        - tmux
        - caffeine
        - fzf
        - xclip
        - python3-apt
        - python3-pip
        - mysql-client
    - name: uninstall python legacy
      apt:
        name: python2.7*
        state: absent
        purge: yes
    - name: upgrade packages and distribution
      apt:
        upgrade: full
        update_cache: yes
        autoremove: yes
        autoclean: yes
        cache_valid_time: 3600
    - name: remove old docker and apache dependencies
      apt:
        name: "{{ item }}"
        state: absent
      loop:
        - docker
        - docker-engine
        - docker.io
        - containerd
        - runc
        - apache2
        - apache2-utils
        - vim
    - name: install docker dependencies
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - lsb-release
        - software-properties-common
    - name: import apt key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    - name: add apt repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ release_linux_name }} stable"
        state: present
    - name: install packages
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io
      notify: docker restart
    - name: remove pip packages
      pip:
        name: "{{ item }}"
        state: absent
      loop:
        - docker-py
    - name: update pip packages
      pip:
        name: "{{ item.name }}"
        version: "{{ item.version }}"
        state: present
      loop:
        - {name: "docker", version: "{{ docker_version }}"}
        - {name: "docker-compose", version: "{{ docker_compose_version }}"}
    - name: ensure group docker exists
      group:
        name: docker
        state: present
    - name: user appending docker group
      ansible.builtin.user:
        name: "{{ default_linux_user }}"
        groups: docker
        append: yes
